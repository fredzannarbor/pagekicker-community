Fetcher Responsibilities

In PageKicker **fetchers** are programs that accept input parameters (typically, queries) and return relevant documents for inclusion in the completed book.  Python or bash are preferred.

Fetchers must do the following things.  (In future all this stuff should be much more abstracted).

- Accept one or more **seeds** (key phrases) read from $TMPDIR$uuid/seedphrases.
 - Other parameters such as geography, language,  are optional. It is the responsibility of the fetcher to provide a mechanism for the operator to provide those parameters.  Usually, this should be accomplished via the command line, or in a file specified at the command line.
- Validate with an external API.
- Submit queries using seeds to the API.  It's the fetcher's responsibility to put those queries in the desired. Default should be alpha.
- Store results in $TMPDIR$uuid/apis/<apiname>
- Preferred result format is markdown.  Other formats should be converted to markdown. Converting "up" from low-semantic-value-added formats such as txt and json to markdown produces more reliable results than converting "down" from PDF and html.  Markdown supports simple tables and images.
- Create bibliography entries for each fetched document (text format) and store them in $TMPDIR$uuid/apis/<apiname>/bibentries.txt

For fetched documents to be incorporated in books, the following things must occur.

Text from fetched documents should by default be included in the cover wordcloud, which means that it needs to be appended to $TMPDIR$uuid/wiki/wiki4cloud.md prior to the java -jar command that builds the wordcloud.  (In future this should be abstracted to 4cloud.md).

Text from fetched documents should be either:
a) appended to an existing "part of the book", such as $TMPDIR$uuid/chapters.md, or ...
b) given its own "new" part of the book, e.g. $TMPDIR$uuid/cyberwatch.md.
c) New parts of the book must be registered in all --booktype scripts, i.e. the cat commands in includes/partsofthebook.sh and includes/draft-report.sh.

Bibliography entries from fetched documents need to be piped into $TMPDIR$uuid/sources.md when that file is created.
