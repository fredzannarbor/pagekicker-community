Finished with all the main functionality in videofetcher script, it seems.

It should now do all the things as per spec, with the exception of things that I
noted in previous long "report" message.
Just in case, link to a copy of that: https://ncry.pt/p/6KBn#pXMux2YXwXJKjVdqeG7YEg5iNU14CznY4Mb1vIIyTx8

New version of the script should be attached to this message.

If there are any issues with formatting of the message, can also find a raw copy
of it at this URL: https://ncry.pt/p/7KBn#2Y03atBUKR0ES880qxdN0_A22EJp35RtXgdZsLo2fbI


Major change from the previous notes is that now script also requires "MoviePy"
ffmpeg wrapper module and "internetarchive" wrapper for archive.org API
(to avoid re-implementing file find/match/download logic from archive "collections").

All dependency modules and binaries of the script now are:

- PyPi modules: requests, PyVimeo, internetarchive, youtube-dl,
moviepy, pillow (optional dep of moviepy for "ImageClip" things).

- Generic apps: ffmpeg.

All except for ffmpeg can be installed using "pip", though most distros should
have most/all of these packages as well.

I'd highly recommend using either pip install --user or virtualenv for
non-system-wide installs, especially on a relatively-old and multi-tenant system
as one you've mentioned above.

Made a quick demo video (35 MiB) on how to install the thing with all
dependencies from scratch, and then use it:
http://fraggod.net/share/087e5c284f3836bf7e/videofetcher-install-use-demo.mp4

You can find all the files that were mentioned there, along with
requirements.txt file from that virtualenv (to use with e.g. pip install -e)
alongside that video, here:
http://fraggod.net/share/087e5c284f3836bf7e/

Note that in more-or-less production environments, you probably won't need all
the logging noise from --debug option.

Also note --cache option used there to skip re-downloading any existing metadata
and/or files in the --outdir.

I've ran script with mostly-default settings there, which have
e.g. --nresults=10 and --nuse=3, see --help for all thir default values
and set/adjust as necessary.


Let me know if you'd be able to install/use the script, and if you'd like
something changed there.

Fairly sure I couldn't have gotten everything working exactly as you wanted from
relatively-brief description for all the options - there are many assumptions
I've made along the way, some of which I've also listed in previous report, as
mentioned above.

If you can work with the code directly, guess it might be easier for you to
adjust all these things there.


Other misc notes, in no particular order:


- I've removed --clipnumber option, as it seem to be redundant with --nuse.

"video_spec" file seem to have only mentioned it in combination with
--subvideos, but it seem to still do same thing as --nuse there.


- I did mention some overlap between --videotitle and --titleimage options
in previous notes, which I've resolved now by using both (resized to video
size) image and overlay text, if both are specified.

With only --videotitle specified, text will be using default font,
white-on-black.

Both options should be disregarded in --subvideos mode, where titles are
generated in a special way, i.e. {source} videos for "{seed}".

Delay for all "title section" is currently static default (in
video_compose() function) - 3 seconds.

Naturally, there are dozens of options to tweak with this kind of thing -
text/bg color, size, font, placement, delay, composition, etc.
Current settings are mostly defaults from OS libs and MoviePy module.


- I've mentioned search results limitations in previous notes - please disregard
all these, current code always fetches page-after-page until required amount
of videos is found.

This is because some Internet Archive videos are inaccessible due to copyright
reasons ("streaming only"), yet are not marked as such anywhere in metadata.

So as script gets pages of results, it probes video URLs with HTTP HEAD
requests (which return "403 Forbidden" code for inaccessible ones) , until it
gets enough good ones.

Same thing for Vimeo results post-fetch filtering due to language, resolution,
and such - there should always be required number of results returned, if
available.


- As you might've noticed already, fetched metadata for each video contains
"videofetcher" section, which has unique "uuid" value assigned to each entry.

All files in the --outdir related to entry will have paths with that uuid in
it - e.g. "video.source.d815a505-0a1a-5e9d-921d-dcc34dfb9e6c" for source video
file, "video.clip." prefix for cut-out part used in "summary video", and so on.

As mentioned above, if these files already exist for entry being processed,
and --cache option is specified, they will all be reused.

Idea is that whatever app will be using these files, will get uuid from the
metadata and pick clips, videos, screencaps, etc from --outdir based solely
on that plus fixed prefix/suffix.


- Screencap for vimeo is fetched from the site directly, as it provides video
thumbnail, which is supposed to be one explicitly approved by the user on
video upload, so probably rather good.

Otherwise screencap is picked using not-too-complicated algorithm, where video
is split into N chunks (80s each, up to 8), with first one discarded, then
ffmpeg "scene change detection" algorithm is used to pick up to 5 frames from
each chunk, and then simply largest one jpeg is used, as file size should
easily exclude "black screen" or "nothing but sky" frames.


- Clip from the video gets picked in very simple way - needed-length footage
gets cut-out starting from 20% offset in video, to avoid start/end credits (if
any), or earlier offset if remaining 80% doesn't provide enough video length.

Using more complex algos like same ffmpeg scene detection seem to make this
process rather slow,. so decided to go with simplier and mostly-ok option.


- If not specified, resulting video resolution will be picked as one of 320p,
480p or 720p, depending on max resolution in downloaded videos.

I.e. if there are any videos with height > 600, 720p will be picked.
If all are under 400px height, 320p.


- Replacement audio clip specified with --audiofile will be played in a loop,
if shorted than video.

No compositing should be done with existing audio, I think.


- As also mentioned before, didn't implement options for "spacer images between
each video", but these can be added rather easily, as well as maybe some
effects, like fade-in/fade-out on video transitions.

Video compositing is done by MoviePy module, which has a decent library of
such effects, see e.g. moviepy.video.fx section in https://zulko.github.io/moviepy/ref/ref.html

Same for audio transitions.


Can't seem to think of anything else at the moment, feel free to ask/comment
about anything that you see out of place, wrong or missing there, as well as any
issues with the script, of course.

Cheers!
